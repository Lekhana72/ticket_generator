import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk, ImageDraw, ImageFont
import pandas as pd
import yagmail
import os

# === CONFIG ===
TEMPLATE_IMAGE = "background.png"  # Optional background (leave blank if none)
FONT_PATH = "Pixelscapes.ttf"  # Or use any pixel-style font you have
TICKETS_FOLDER = "tickets"

SENDER_EMAIL = "flashbeee.2k25@gmail.com"
APP_PASSWORD = "pzof pruq hdop iiim"

# === TKINTER GUI ===
root = tk.Tk()
root.title("Farewell Invitation Sender")
root.geometry("800x750")

# === Background ===
if os.path.exists(TEMPLATE_IMAGE):
    bg = Image.open(TEMPLATE_IMAGE).resize((800, 750))
    bg_img = ImageTk.PhotoImage(bg)
    bg_label = tk.Label(root, image=bg_img)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)

# === Input Fields ===
labels = {}
entries = {}

fields = ["Venue", "Date", "Time", "Address", "Welcome Message"]
y_positions = [350, 420, 490, 560, 630]

for i, field in enumerate(fields):
    labels[field] = tk.Label(root, text=f"{field}:", bg="white", font=("Comic Sans MS", 14, "bold"))
    labels[field].place(x=100, y=y_positions[i])
    entries[field] = tk.Entry(root, width=40, font=("Comic Sans MS", 14))
    entries[field].place(x=250, y=y_positions[i])

# === Excel Upload ===
EXCEL_FILE = ""

def upload_file():
    global EXCEL_FILE
    file = filedialog.askopenfilename(filetypes=[("Excel Files", "*.xlsx")])
    if file:
        EXCEL_FILE = file
        file_label.config(text=os.path.basename(file))

upload_btn = tk.Button(root, text="Upload Excel", command=upload_file, bg="#FFB6C1", font=("Comic Sans MS", 10, "bold"))
upload_btn.place(x=100, y=300)

file_label = tk.Label(root, text="No file selected", bg="white", font=("Comic Sans MS", 10))
file_label.place(x=250, y=300)

# === Status Label ===
status_label = tk.Label(root, text="Status: Waiting", bg="white", font=("Comic Sans MS", 12), fg="green")
status_label.place(x=100, y=300-50)

# === Generate Ticket ===
def generate_ticket(name):
    os.makedirs(TICKETS_FOLDER, exist_ok=True)
    img = Image.new("RGB", (600, 900), "#ffb6c1")  # pink background
    draw = ImageDraw.Draw(img)

    try:
        font_title = ImageFont.truetype(FONT_PATH, 40)
        font_normal = ImageFont.truetype(FONT_PATH, 24)
        font_small = ImageFont.truetype(FONT_PATH, 18)
    except:
        font_title = font_normal = font_small = ImageFont.load_default()

    
    # Header (moved down from y=30 to y=60)
    draw.text((230, 60), "TICKET", fill="black", font=font_title)

    # Categories
    categories = ["games", "lunch", "musical", "DJ", "etc"]
    for i, cat in enumerate(categories):
        x = 50 + i * 100
        draw.text((x, 120), cat, fill="black", font=font_small)  # shifted from y=100 to y=120
        draw.rectangle([x, 145, x + 15, 160], outline="black", width=2)  # smaller box: 15px width, 15px height

    draw.line((50, 170, 550, 170), fill="black", width=2)

    # Title section
    draw.text((50, 200), f"Title: FLASHBEEE", fill="black", font=font_normal)

    # Name
    draw.text((50, 280), f"To: {name}", fill="black", font=font_normal)

    # Event details
    draw.text((50, 350), f"Venue: {entries['Venue'].get()}", fill="black", font=font_small)
    draw.text((50, 390), f"Date: {entries['Date'].get()} at {entries['Time'].get()}", fill="black", font=font_small)
    draw.text((50, 430), f"Address: {entries['Address'].get()}", fill="black", font=font_small)

    # Welcome Message
    draw.text((50, 490), f"{entries['Welcome Message'].get()}", fill="black", font=font_small)

    # Rating stars
    draw.text((50, 580), "Mood-o-meter : ", fill="black", font=font_small)
    draw.text((230, 580), "‚≠ê ‚≠ê ‚≠ê ‚≠ê ‚≠ê", fill="black", font=font_small)

    # Draw a line
    draw.line((50, 650, 550, 650), fill="black", width=2)
    # Barcode section
    draw.text((230, 660), "SEE YOU THERE", fill="black", font=font_small)
    draw.rectangle([50, 690, 550, 730], fill="black")  # Simulated barcode box
    draw.text((180, 740), "2927 2 017 02 209605 1 5080", fill="black", font=font_small)

    filename = os.path.join(TICKETS_FOLDER, f"{name}_ticket.png")
    img.save(filename)
    return filename




# === Send Emails ===
def send_invitations():
    if EXCEL_FILE == "":
        messagebox.showerror("Error", "Please upload an Excel file.")
        return

    try:
        status_label.config(text="Status: Processing...", fg="orange")

        df = pd.read_excel(EXCEL_FILE)
        df.columns = df.columns.str.strip()

        if 'Name' not in df.columns or 'Email' not in df.columns:
            messagebox.showerror("Error", "Excel must have 'Name' and 'Email' columns.")
            return

        df['Name'] = df['Name'].astype(str)
        df['Email'] = df['Email'].astype(str)

        yag = yagmail.SMTP(SENDER_EMAIL, APP_PASSWORD)

        for _, row in df.iterrows():
            name = row['Name']
            email = row['Email']

            print(f"Sending to: {name} ({email})")
            ticket_file = generate_ticket(name)

            contents = [
                f"Dear {name},\n\nYou are invited to our farewell party!\n\nVenue: {entries['Venue'].get()}\nDate: {entries['Date'].get()} at {entries['Time'].get()}\nAddress: {entries['Address'].get()}\n\n{entries['Welcome Message'].get()}\n\nSee you there! üéâ",
                ticket_file
            ]

            yag.send(to=email, subject="Farewell Party Invitation", contents=contents)
            print(f"‚úÖ Sent to {name} ({email})")

        status_label.config(text="Status: Invitations Sent!", fg="green")
        messagebox.showinfo("Done", "All invitations sent successfully!")

    except Exception as e:
        status_label.config(text="Status: Error", fg="red")
        messagebox.showerror("Error", str(e))

# === Buttons ===
send_btn = tk.Button(root, text="Send Invitations", command=send_invitations, bg="#FF69B4", font=("Comic Sans MS", 12, "bold"))
send_btn.place(x=100, y=700)



# Ensure the tickets folder exists
if not os.path.exists(TICKETS_FOLDER):
    os.makedirs(TICKETS_FOLDER)

# Ensure the font file exists
if not os.path.exists(FONT_PATH):
    messagebox.showerror("Error", f"Font file '{FONT_PATH}' not found. Please provide a valid font file.")
    root.destroy()
    exit()

# Ensure the background image exists (if specified)
if TEMPLATE_IMAGE and not os.path.exists(TEMPLATE_IMAGE):
    messagebox.showerror("Error", f"Background image '{TEMPLATE_IMAGE}' not found. Please provide a valid image file.")
    root.destroy()
    exit()

# Ensure email credentials are set
if not SENDER_EMAIL or not APP_PASSWORD:
    messagebox.showerror("Error", "Please set your email and app password in the configuration section.")
    root.destroy()
    exit()

# === Start the GUI ===
root.mainloop()

